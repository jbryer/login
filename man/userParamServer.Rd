% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/user_param_module.R
\name{userParamServer}
\alias{userParamServer}
\title{Server module for user parameter input}
\usage{
userParamServer(
  id,
  params,
  param_labels = params,
  param_types = rep("character", length(params)),
  param_defaults = rep("", length(params)),
  modal_title = "Application Settings",
  intro_message = "",
  modal_size = "l",
  save_label = "Save",
  cancel_label = NULL,
  allow_cookies = TRUE,
  save_cookie_label = "Save parameters as cookies.",
  validator = simple_parameter_validator,
  open_on_startup = TRUE,
  cookie_password = NULL,
  cookie_expiration = 30,
  input_params = list()
)
}
\arguments{
\item{id}{unique ID for the Shiny Login module.}

\item{params}{a character vector with the name of the parameters. This should be valid R names
(i.e. start with a letter, do not contain any spaces, etc.).}

\item{param_labels}{labels used for the user inputs.}

\item{param_types}{the type of value. Valid types include \code{character}, \code{numeric},
\code{date}, \code{file}, \code{logical}, \code{password}, or \code{select}.
Note that for \code{select} you must specify the \code{choices} parameter in the \code{input_params}.
For example, \code{input_params <- list('param_name' = c('Option A', 'Option B'))}}

\item{param_defaults}{default values for the params.}

\item{modal_title}{title for the modal dialog.}

\item{intro_message}{A message that is displayed at the top of the modal dialog. This can
be a character string or any valid Shiny container (e.g. \code{shiny::div}).}

\item{modal_size}{One of "s" for small, "m" (the default) for medium, "l" for large, or "xl" for
extra large. See \code{\link[shiny:modalDialog]{shiny::modalDialog()}} for more info.}

\item{save_label}{label for the save button in the modal dialog.}

\item{cancel_label}{label for the cancel button in the modal dialog, or \code{NULL} to exclude.
If available a user clicking the cancel button will bypass any validation checks.}

\item{allow_cookies}{if \code{TRUE} the user can opt to save the values as cookies. The user will
still be presented with a checkbox to not save parameters as cookies.}

\item{save_cookie_label}{label for the check box where the user can opt to save the parameter
values as cookies.}

\item{validator}{a function to validate the user inputs. See \code{\link[=simple_parameter_validator]{simple_parameter_validator()}} for
an example. The function should take two parameters: a named list of values to check
and a vector of value types (see \code{param_types}). The function should return either \code{TRUE}
if the validation passes or a character string indicating why the validation failed. Set
to \code{NULL} to disable validation.}

\item{open_on_startup}{if \code{TRUE} the modal dialog will be shown if the parameters could not be
read from cookies (i.e. they have not been set yet).}

\item{cookie_password}{key used to encrypt/decrypt cookies. See \code{\link[=encrypt_cookie]{encrypt_cookie()}} and \code{\link[=decrypt_cookie]{decrypt_cookie()}}.}

\item{cookie_expiration}{the number of days after which the cookie will expire.}

\item{input_params}{additional parameters passed to the Shiny input. This should be a named list
where names correspond to \code{params}.}
}
\value{
a \link[shiny:reactiveValues]{shiny::reactiveValues} object.
}
\description{
The primary purpose of this Shiny module is to provide a framework to get parameters from a user
required for the Shiny application to run.
}
\details{
See the \code{parameters} vignette for more information.
}
